package main

import (
	"fmt"
)

func BinToNum(input string) (num int) {
	l := len(input)
	for i := l - 1; i >= 0; i-- {
		num += (int(input[l-i-1]) - 48) << uint8(i)
	}
	return
}

func NumToBin(input int) (bin string) {
	if input == 0 {
		return "00000000"
	}
	bytez := []byte{48, 48, 48, 48, 48, 48, 48, 48}
	i := len(bytez) - 1
	for ; input > 0; input /= 2 {
		bytez[i] = byte(48 + input%2)
		i--
	}
	bin = string(bytez)
	return
}

func main() {
	str := `
package main

import "fmt"

//M6Ly9naXRodWIuY29tL2RhcHBsZWRnZXIvQW5uQ2hhaW4vaXNzdWVzLzM3aHR0cH
func main() {
	fmt.Println("Clockwise rotate 6")
}
`
	result := Encrypt(str)
	fmt.Println(result)
	fmt.Println(Decrypt(result))
}

func Encrypt(str string) (result string) {
	for _, i := range str {
		result += NumToBin(int(i))
	}
	return
}

func Decrypt(str string) (result string) {
	str = "000010100111000001100001011000110110101101100001011001110110010100100000011011010110000101101001011011100000101000001010011010010110110101110000011011110111001001110100001000000010001001100110011011010111010000100010000010100000101000101111001011110100110100110110010011000111100100111001011011100110000101011000010100100110111101100100010101110100100101110101010110010011001000111001011101000100110000110010010100100110100001100011010010000100001001110011010110100101011101010010011011100101101001011000010010010111011001010001010101110011010101110101010100010011001001101000011010000110000101010111001101000111011001100001010110000100111001111010011001000101011101010110011110100100110001111010010011010011001101100001010010000101001000110000011000110100100000001010011001100111010101101110011000110010000001101101011000010110100101101110001010000010100100100000011110110000101000001001011001100110110101110100001011100101000001110010011010010110111001110100011011000110111000101000001000100100001101101100011011110110001101101011011101110110100101110011011001010010000001110010011011110111010001100001011101000110010100100000001101100010001000101001000010100111110100001010"
	if len(str)%8 != 0 {
		return "invalid input"
	}
	var bytez []byte
	for i := 0; i < len(str)/8; i++ {
		bytez = append(bytez, byte(BinToNum(str[i*8:(i+1)*8])))
	}
	result = string(bytez)
	return
}
