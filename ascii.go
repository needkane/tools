package main

import (
	"fmt"
)

func BinToNum(input string) (num int) {
	l := len(input)
	for i := l - 1; i >= 0; i-- {
		num += (int(input[l-i-1]) - 48) << uint8(i)
	}
	return
}

func NumToBin(input int) (bin string) {
	if input == 0 {
		return "00000000"
	}
	bytez := []byte{48, 48, 48, 48, 48, 48, 48, 48}
	i := len(bytez) - 1
	for ; input > 0; input /= 2 {
		bytez[i] = byte(48 + input%2)
		i--
	}
	bin = string(bytez)
	return
}

func main() {
	str := `
package main

import (
	"fmt"
	"time"
)

//M6Ly9naXRodWIuY29tL2RhcHBsZWRnZXIvQW5uQ2hhaW4vaXNzdWVzLzM3aHR0cH
func main() {
	timeLayout := "2006-01-02"
	timeZhongAn := "2013-10-09"
	timeParse, _ := time.Parse(timeLayout, timeZhongAn)
	result := time.Now().Year() - timeParse.Year()
	fmt.Println(result)
}

`
	result := Encrypt(str)
	fmt.Println(result)
	fmt.Println(Decrypt(result))
}

func Encrypt(str string) (result string) {
	for _, i := range str {
		result += NumToBin(int(i))
	}
	return
}

func Decrypt(str string) (result string) {
	//	str
	if len(str)%8 != 0 {
		return "invalid input"
	}
	var bytez []byte
	for i := 0; i < len(str)/8; i++ {
		bytez = append(bytez, byte(BinToNum(str[i*8:(i+1)*8])))
	}
	result = string(bytez)
	return
}
